---
title: Concourse Architecture
owner: Concourse
---

This topic describes the VMs and software components that make up a Concourse installation.

## <a id="diagram"></a> Component Diagram

Concourse software components can be logically split between two subsystems: a _server_ (web on picture) and one or more _worker_. In a simple setup all of them can run on a single VM. In a more complex system servers and workers can be scalled accross multiple VMs. This diagram shows where its components run and how they work together.

The [Component Descriptions](#description) below explain what each component does. [Internal vs. External Workers](#comms) describes the two setups that the web VM uses to securely communicate with worker VMs, depending on whether or not the ATC can access the workers directly.

![Arch Doc](concourse-arch.png)

## <a id="description"></a> Component Descriptions

The following table describes the function of each Concourse component:

<table>
  <tr>
    <th>VM</th>
    <th>Component</th>
    <th>Function</th>
  </tr><tr>
    <td rowspan=2><b>Web</b></td>
    <td><b>ATC</b></td>
    <td>Runs an HTTP server that:
      <ul><li>Provides the Concourse web UI.</li>
      <li>Serves the Concourse API on port 8080, to support the Fly CLI and other tools.</li>
      <li>Schedules pipelines to run on worker VMs.</li></ul></td>
  </tr><tr>
    <td><b>TSA</b></td>
    <td>Runs an SSH server that:
      <ul><li>Listens on port 2222.</li>
      <li>Securely <a href="http://concourse.ci/registering-via-tsa.html">registers worker VMs</a> for use by the ATC.</li>
      <li>Handshakes with worker VMs to open an ongoing <a href="#comms">secure connection</a> between the ATC and the workers:
        <ul><li>Regular SSH for internal workers, VMs that the ATC can access directly.</li>
        <li>Reverse SSH tunnel for external workers, VMs in different network from ATC and behind firewall, or otherwise inaccessible.</li></ul></li>
      <li>Pings workers for heartbeat every 30 seconds, updates ATC with worker metrics and notifies ATC that worker is in <code>stalled</code> state if there is no response.</li></ul>
    </td>
  </tr><tr>
    <td><b>Database</b></td>
    <td><b>PostgreSQL</td>
    <td>Stores all pipeline data, such as build configurations, build logs and resource versions, for use by worker VMs.</td>
  </tr><tr>
    <td rowspan=3><b>Worker</b></td>
    <td><b>Beacon</b></td>
    <td><ul><li>Sends worker addresses and other <a href="https://github.com/concourse/atc/blob/master/worker.go">information</a> to the ATC, to register that the worker is ready to run Concourse build pipelines</li>
      <li>Handshakes with TSA on web VM to open an ongoing <a href="#comms">secure connection</a> to the ATC:
        <ul><li>Regular SSH for internal workers, VMs that the ATC can access directly.</li>
        <li>Reverse SSH tunnel for external workers, VMs in different network from ATC and behind firewall, or otherwise inaccessible.</li></ul></li></ul>
  </tr><tr>
    <td><b>Garden</b></td>
    <td>
      <ul><li>Listens on port 7777.</li>
      <li>Provides an API for the ATC to manage <b>containers</b> to do things like:
        <ul><li>Discover new versions of <a href="http://concourse.ci/resource-types.html">resources</a>.</li>
        <li>Run the tasks in a pipeline <a href="http://concourse.ci/build-plans.html">build plan.</a></li></ul></li></ul></td>
  </tr><tr>
    <td><b>Baggageclaim</b></td>
    <td>
      <ul><li>Listens on port 7788.</li>
      <li>Provides an API for the ATC to manage disk resources, or <b>volumes</b>, mounted to containers.</li>
      <li>Uses volumes to store persistent caches of resource versions and to propagate artifacts such as caches and task outputs through the containers used for a build.</li></ul></td>
  </tr>
</table>

For more information, see the [Concourse Documentation](http://concourse.ci/architecture.html). 

## <a id="comms"></a> Internal vs. External Workers

Concourse workers can be either _internal_, also called _local_; or _external_, also called _remote_:

* **Internal**: The web VM, which hosts the ATC, can connect to the worker over HTTP.
  - Typical when web and worker VMs are all on the same private network.

* **External**: The web VM cannot access worker over HTTP, but the worker VM can directly and securely communicate with the web VM over SSH.
  - Typical when the worker VMs are behind a firewall, or in a separate network from the web VM, or when security groups prevent communication from web VM to worker.

(To let users call the Concourse API from anywhere, point a load balancer to the web VM or connect web VM to public network.)

Depending on whether the worker VMs are internal or external, Concourse sets up secure communications from the ATC to the workers as described below.

### <a id="comms-internal"></a> Internal Worker Communications

1. The worker's Beacon connects to TSA via SSH and runs the `register-worker` command, passing in the worker [payload](https://github.com/concourse/atc/blob/master/worker.go).

1. The TSA registers received information with ATC and starts heartbeating every 30s to ATC. Every heartbeat will contain updated numbers of containers and volumes from worker's Garden and Baggageclaim.

1. ATC connects to Garden and Baggageclaim API on the worker via HTTP, to create containers and volumes for running containerized processes.

1. If TSA fails to connect to worker to gather information it will stop heartbeating and worker will be mark as `stalled` in ATC.

### <a id="comms-external"></a> External Worker Communications

1. The worker's Beacon connects to TSA via SSH and runs the `forward-worker` command, passing in the worker [payload](https://github.com/concourse/atc/blob/master/worker.go). 

1. This command sets up reverse SSH tunnel between worker and web VM allowing ATC to access worker's Garden and BaggageClaim API.

1. The TSA replaces the Garden and Baggageclaim component addresses with forwarded local address and two ports in the worker payload.

1. The worker initiates an `ssh` connection to its proxied ports on the web VM, setting up a reverse proxy tunnel.

1. ATC connects to Garden and Baggageclaim API on the worker via HTTP by talking to specified by TSA forwarded via SSH tunnel addresses.





